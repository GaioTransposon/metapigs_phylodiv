x$Cohort.x <- factor(x$Cohort.x,
levels=c("Control",
"D-Scour",
"ColiGuard",
"Neomycin",
"Neomycin+D-Scour",
"Neomycin+ColiGuard"))
cw_summary <- x %>%
distinct() %>%
group_by(Cohort.x) %>%
tally()
my_plot <- ggboxplot(x, x="Cohort.x", y="diff", fill = "Cohort.x",
ylab="weight change (%)", legend = "none")+
My_Theme+
geom_text(data = cw_summary,
aes(Cohort.x, Inf, label = n), vjust="inward", size = your_font_size)+
stat_compare_means(method = "anova", label.x=1.5, size = your_font_size)
return(my_plot)
}
myfun_weight_breed_plot <- function(my_df) {
x <- my_df
# calculate change
x$diff = ((x$weight.y-x$weight.x)/x$weight.y)*100
# remove crazy outliers
x <- x %>% dplyr::filter(diff<100) %>% dplyr::filter(diff>-100)
cw_summary <- x %>%
distinct() %>%
group_by(breed.x) %>%
tally()
my_plot <- ggboxplot(x, x="breed.x", y="diff", fill = "breed.x",
ylab="weight change (%)", legend = "none")+
My_Theme+
geom_text(data = cw_summary,
aes(breed.x, Inf, label = n), vjust="inward", size = your_font_size)+
stat_compare_means(method = "anova", label.x=1.5, size = your_font_size)
my_plot <- set_palette(my_plot, "jco")
return(my_plot)
}
myfun_weight_BIRTH_plot <- function(my_df) {
x <- my_df
# calculate change
x$diff = ((x$weight.y-x$weight.x)/x$weight.y)*100
# remove crazy outliers
x <- x %>% dplyr::filter(diff<100) %>% dplyr::filter(diff>-100)
cw_summary <- x %>%
distinct() %>%
group_by(BIRTH_DAY.x) %>%
tally()
my_plot <- ggboxplot(x, x="BIRTH_DAY.x", y="diff", fill = "BIRTH_DAY.x",
ylab="weight change (%)", legend = "none")+
My_Theme+
geom_text(data = cw_summary,
aes(BIRTH_DAY.x, Inf, label = n), vjust="inward", size = your_font_size)+
stat_compare_means(method = "anova", label.x=1.5, size = your_font_size)
my_plot <- set_palette(my_plot, "jco")
return(my_plot)
}
##############################################################################
# subsetting
piggies_t0 <- df_weight %>% dplyr::filter(date == "t0")
piggies_t2 <- df_weight %>% dplyr::filter(date == "t2")
piggies_t4 <- df_weight %>% dplyr::filter(date == "t4")
piggies_t6 <- df_weight %>% dplyr::filter(date == "t6")
piggies_t8 <- df_weight %>% dplyr::filter(date == "t8")
###########################
df_t0_t2 <- merge(piggies_t0,piggies_t2, by=c("pig"))
df_t2_t4 <- merge(piggies_t2,piggies_t4, by=c("pig"))
df_t4_t6 <- merge(piggies_t4,piggies_t6, by=c("pig"))
df_t6_t8 <- merge(piggies_t6,piggies_t8, by=c("pig"))
df_t2_t6 <- merge(piggies_t2,piggies_t6, by=c("pig"))
df_t4_t8 <- merge(piggies_t4,piggies_t8, by=c("pig"))
df_t0_t8 <- merge(piggies_t0,piggies_t8, by=c("pig"))
###########################
# plot:
myfun_weight_cohort_plot(df_t0_t2)
myfun_weight_cohort_plot(df_t2_t4)
myfun_weight_cohort_plot(df_t4_t6)
myfun_weight_cohort_plot(df_t6_t8)
myfun_weight_cohort_plot(df_t2_t6)
myfun_weight_cohort_plot(df_t4_t8)
myfun_weight_cohort_plot(df_t0_t8)
#
myfun_weight_breed_plot(df_t0_t2)
myfun_weight_breed_plot(df_t2_t4)
myfun_weight_breed_plot(df_t4_t6)
myfun_weight_breed_plot(df_t6_t8)
myfun_weight_breed_plot(df_t2_t6)
myfun_weight_breed_plot(df_t4_t8)
myfun_weight_breed_plot(df_t0_t8)
#
myfun_weight_BIRTH_plot(df_t0_t2)
myfun_weight_BIRTH_plot(df_t2_t4)
myfun_weight_BIRTH_plot(df_t4_t6)
myfun_weight_BIRTH_plot(df_t6_t8)
myfun_weight_BIRTH_plot(df_t2_t6)
myfun_weight_BIRTH_plot(df_t4_t8)
myfun_weight_BIRTH_plot(df_t0_t8)
###########################
# get and gather all stats:
weight_cohort_stats <- rbind(myfun_weight_cohort_stats(df_t0_t2,"t0_t2"),
myfun_weight_cohort_stats(df_t2_t4,"t2_t4"),
myfun_weight_cohort_stats(df_t4_t6,"t4_t6"),
myfun_weight_cohort_stats(df_t6_t8,"t6_t8"),
myfun_weight_cohort_stats(df_t2_t6,"t2_t6"),
myfun_weight_cohort_stats(df_t4_t8,"t4_t8"),
myfun_weight_cohort_stats(df_t0_t8,"t0_t8")
)
weight_breed_stats <- rbind(myfun_weight_breed_stats(df_t0_t2,"t0_t2"),
myfun_weight_breed_stats(df_t2_t4,"t2_t4"),
myfun_weight_breed_stats(df_t4_t6,"t4_t6"),
myfun_weight_breed_stats(df_t6_t8,"t6_t8"),
myfun_weight_breed_stats(df_t2_t6,"t2_t6"),
myfun_weight_breed_stats(df_t4_t8,"t4_t8"),
myfun_weight_breed_stats(df_t0_t8,"t0_t8")
)
weight_BIRTH_stats <- rbind(myfun_weight_BIRTH_stats(df_t0_t2,"t0_t2"),
myfun_weight_BIRTH_stats(df_t2_t4,"t2_t4"),
myfun_weight_BIRTH_stats(df_t4_t6,"t4_t6"),
myfun_weight_BIRTH_stats(df_t6_t8,"t6_t8"),
myfun_weight_BIRTH_stats(df_t2_t6,"t2_t6"),
myfun_weight_BIRTH_stats(df_t4_t8,"t4_t8"),
myfun_weight_BIRTH_stats(df_t0_t8,"t0_t8")
)
details %>%
group_by(breed,BIRTH_DAY) %>%
tally()
############
# convert rownames to first column
weight_cohort_stats <- setDT(weight_cohort_stats, keep.rownames = TRUE)[]
# add data to workbook
# addWorksheet(wb, "weight_cohort_stats")
# writeData(wb, sheet = "weight_cohort_stats", weight_cohort_stats, rowNames = FALSE)
fwrite(x=weight_cohort_stats, file=paste0(stats_dir,"weight_cohort_stats.csv"))
# convert rownames to first column
weight_breed_stats <- setDT(weight_breed_stats, keep.rownames = TRUE)[]
# add data to workbook
# addWorksheet(wb, "weight_breed_stats")
# writeData(wb, sheet = "weight_breed_stats", weight_breed_stats, rowNames = FALSE)
# convert rownames to first column
weight_BIRTH_stats <- setDT(weight_BIRTH_stats, keep.rownames = TRUE)[]
# add data to workbook
# addWorksheet(wb, "weight_BIRTH_stats")
# writeData(wb, sheet = "weight_BIRTH_stats", weight_BIRTH_stats, rowNames = FALSE)
############
stats_filtered_output <- weight_cohort_stats %>% dplyr::filter(`p adj` <= 0.05) %>%
dplyr::filter(comparison=="Neomycin+D-Scour-Neomycin"|
comparison=="Neomycin+ColiGuard-Neomycin"|
comparison=="Neomycin-Control"|
comparison=="D-Scour-Control"|
comparison=="ColiGuard-Control")
###########################
# this is for extracting the legend only
df_t0_t2 <- merge(piggies_t0,piggies_t2, by=c("pig"))
df_t0_t2$diff = ((df_t0_t2$weight.y-df_t0_t2$weight.x)/df_t0_t2$weight.y)*100
df_t0_t2$Cohort.x <- factor(df_t0_t2$Cohort.x,
levels=c("Control",
"D-Scour",
"ColiGuard",
"Neomycin",
"Neomycin+D-Scour",
"Neomycin+ColiGuard"))
for_legend_only <- ggboxplot(df_t0_t2, x = "Cohort.x", y = "diff", fill = "Cohort.x",
legend = "right")+
scale_color_manual(labels = c("Control",
"D-Scour",
"ColiGuard",
"Neo",
"Neo+D",
"Neo+C"),
values = c("#F8766D",
"#B79F00",
"#00BA38",
"#00BFC4",
"#619CFF",
"#F564E3")) +
guides(fill=guide_legend("Cohort")) +
My_Theme
addSmallLegend <- function(myPlot, pointSize = 10, textSize = 8, spaceLegend = 0.6) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
# Apply on original plot
for_legend_only <- addSmallLegend(for_legend_only)
leg <- get_legend(for_legend_only)
###########################
# final plot:
empty_space = plot_grid(NULL, NULL, NULL, NULL, ncol=4)
top_row = plot_grid(myfun_weight_cohort_plot(df_t0_t2),
myfun_weight_cohort_plot(df_t2_t4),
myfun_weight_cohort_plot(df_t4_t6),
myfun_weight_cohort_plot(df_t6_t8),
ncol=4,
rel_widths=c(0.25,0.25,0.25,0.25),
labels=c("t0-t2","t2-t4","t4-t6","t6-t8"),
label_size = 10)
bottom_row = plot_grid(myfun_weight_cohort_plot(df_t2_t6),
myfun_weight_cohort_plot(df_t4_t8),
myfun_weight_cohort_plot(df_t0_t8),
leg, ncol=4,
rel_widths=c(0.25,0.25,0.25,0.25),
labels=c("t2-t6","t4-t8","t0-t8",""),
label_size = 10)
weight_cohort_plots <- plot_grid(empty_space,
top_row,
bottom_row,
nrow=3)
pdf(paste0(out_dir,"weight_deltas_by_cohort.pdf"))
ggdraw() +
draw_image(timeline, x = 0, y = 0.33) +
draw_plot(weight_cohort_plots)
dev.off()
##############################################################################
##############################################################################
# BREED
###########################
# this is for extracting the legend only
df_t0_t2 <- merge(piggies_t0,piggies_t2, by=c("pig"))
df_t0_t2$diff = ((df_t0_t2$weight.y-df_t0_t2$weight.x)/df_t0_t2$weight.y)*100
for_legend_only <- ggboxplot(df_t0_t2, x = "breed.x", y = "diff", fill = "breed.x",
legend = "right")+
guides(fill=guide_legend("Cohort")) +
My_Theme
for_legend_only <- set_palette(for_legend_only, "jco")
addSmallLegend <- function(myPlot, pointSize = 10, textSize = 8, spaceLegend = 0.6) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
# Apply on original plot
for_legend_only <- addSmallLegend(for_legend_only)
leg <- get_legend(for_legend_only)
###########################
# final plot:
empty_space = plot_grid(NULL, NULL, NULL, NULL, ncol=4)
top_row = plot_grid(myfun_weight_breed_plot(df_t0_t2),
myfun_weight_breed_plot(df_t2_t4),
myfun_weight_breed_plot(df_t4_t6),
myfun_weight_breed_plot(df_t6_t8),
ncol=4,
rel_widths=c(0.25,0.25,0.25,0.25),
labels=c("t0-t2","t2-t4","t4-t6","t6-t8"),
label_size = 10)
bottom_row = plot_grid(myfun_weight_breed_plot(df_t2_t6),
myfun_weight_breed_plot(df_t4_t8),
myfun_weight_breed_plot(df_t0_t8),
leg, ncol=4,
rel_widths=c(0.25,0.25,0.25,0.25),
labels=c("t2-t6","t4-t8","t0-t8",""),
label_size = 10)
weight_breed_plots <- plot_grid(empty_space,
top_row,
bottom_row,
nrow=3)
pdf(paste0(out_dir,"weight_deltas_by_breed.pdf"))
ggdraw() +
draw_image(timeline, x = 0, y = 0.33) +
draw_plot(weight_breed_plots)
dev.off()
##############################################################################
##############################################################################
# BIRTH
###########################
# this is for extracting the legend only
df_t0_t2 <- merge(piggies_t0,piggies_t2, by=c("pig"))
df_t0_t2$diff = ((df_t0_t2$weight.y-df_t0_t2$weight.x)/df_t0_t2$weight.y)*100
for_legend_only <- ggboxplot(df_t0_t2, x = "BIRTH_DAY.x", y = "diff", fill = "BIRTH_DAY.x",
legend = "right")+
guides(fill=guide_legend("BIRTH")) +
My_Theme
for_legend_only <- set_palette(for_legend_only, "jco")
addSmallLegend <- function(myPlot, pointSize = 10, textSize = 8, spaceLegend = 0.6) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
# Apply on original plot
for_legend_only <- addSmallLegend(for_legend_only)
leg <- get_legend(for_legend_only)
###########################
# final plot:
empty_space = plot_grid(NULL, NULL, NULL, NULL, ncol=4)
top_row = plot_grid(myfun_weight_BIRTH_plot(df_t0_t2),
myfun_weight_BIRTH_plot(df_t2_t4),
myfun_weight_BIRTH_plot(df_t4_t6),
myfun_weight_BIRTH_plot(df_t6_t8),
ncol=4,
rel_widths=c(0.25,0.25,0.25,0.25),
labels=c("t0-t2","t2-t4","t4-t6","t6-t8"),
label_size = 10)
bottom_row = plot_grid(myfun_weight_BIRTH_plot(df_t2_t6),
myfun_weight_BIRTH_plot(df_t4_t8),
myfun_weight_BIRTH_plot(df_t0_t8),
leg, ncol=4,
rel_widths=c(0.25,0.25,0.25,0.25),
labels=c("t2-t6","t4-t8","t0-t8",""),
label_size = 10)
weight_BIRTH_plots <- plot_grid(empty_space,
top_row,
bottom_row,
nrow=3)
pdf(paste0(out_dir,"weight_deltas_by_BIRTH.pdf"))
ggdraw() +
draw_image(timeline, x = 0, y = 0.33) +
draw_plot(weight_BIRTH_plots)
dev.off()
##################################################################################
##################################################################################
# # save stats in existing workbook
# saveWorkbook(wb, paste0(out_dir_git,"stats.xlsx"), overwrite=TRUE)
##################################################################################
##################################################################################
##################################################################################
##################################################################################
library(readr)
library(tidyverse)
library(ggplot2)
library(splitstackshape)
library(ggpubr)
source_data = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/source_data/" # git
middle_dir = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/middle_dir/" # git
stats_dir = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/middle_dir/stats/" # git
out_dir_git = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/out/" # git
out_dir = "/Users/danielagaio/Desktop/metapigs_phylodiv/phylosift/out/" # local
readcounts_samples <- read.csv(paste0(source_data,"readcounts_samples.csv"), header=FALSE)
NROW(readcounts_samples)
r <- cSplit(readcounts_samples, "V1","_")
r$DNA_plate <- paste0(r$V1_1,"_",r$V1_2)
r <- cSplit(r, "V1_3",".")
r <- r %>%
dplyr::select(DNA_plate,V1_3_1, V3)
colnames(r) <- c("DNA_plate","DNA_well","read_count")
head(r)
alpha_1M <- read.csv(paste0(middle_dir,"all.alphadiv"), sep="")
alpha_100K <- read.csv(paste0(middle_dir,"PD_100k/all.alphadiv"), sep="")
get_cleaner_fun <- function(df) {
colnames(df)[1] <- "provv"
df <- cSplit(df, "provv","_")
df$DNA_plate <- paste0(df$provv_1,"_",df$provv_2)
df$DNA_well <- df$provv_3
df <- df %>% dplyr::select(!starts_with("provv"))
df_clean <- df
return(df_clean)
}
alpha_100K <- get_cleaner_fun(alpha_100K)
alpha_1M <- get_cleaner_fun(alpha_1M)
alpha_100K <- alpha_100K %>%
dplyr::select(unrooted_pd,bwpd,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(unrooted_pd,bwpd), names_to="metric") %>%
dplyr::mutate(analysis = "100K")
alpha_1M <- alpha_1M %>%
dplyr::select(unrooted_pd,bwpd,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(unrooted_pd,bwpd), names_to="metric") %>%
dplyr::mutate(analysis = "1M")
alpha <- rbind(alpha_100K,
alpha_1M)
# median and sd
alpha %>%
group_by(metric) %>%
dplyr::summarise(median_unrooted=median(unrooted_pd),
sd_unrooted=sd(unrooted_pd),
median_bwpd=median(bwpd),
sd_bwpd=sd(bwpd))
beta_100K <- read_csv(paste0(middle_dir,"PD_100K/pca_piggies_sel.txt.proj"),
col_names = FALSE)
beta_1M <- read_csv(paste0(middle_dir,"pca_piggies_sel.txt.proj"),
col_names = FALSE)
beta_100K <- get_cleaner_fun(beta_100K)
beta_1M <- get_cleaner_fun(beta_1M)
beta_100K <- beta_100K %>%
dplyr::select(X2,X3,X4,X5,X6,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(X2,X3,X4,X5,X6), names_to="metric") %>%
dplyr::mutate(analysis = "100K")
beta_1M <- beta_1M %>%
dplyr::select(X2,X3,X4,X5,X6,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(X2,X3,X4,X5,X6), names_to="metric") %>%
dplyr::mutate(analysis = "1M")
beta <- rbind(beta_100K,
beta_1M)
beta$metric <- gsub("X2","PC1",beta$metric)
beta$metric <- gsub("X3","PC2",beta$metric)
beta$metric <- gsub("X4","PC3",beta$metric)
beta$metric <- gsub("X5","PC4",beta$metric)
beta$metric <- gsub("X6","PC5",beta$metric)
both <- rbind(alpha,beta)
# give some order
both$metric <- factor(both$metric,
levels=c("unrooted_pd","bwpd",
"PC1","PC2","PC3","PC4","PC5"))
pdf(paste0(out_dir,"correlation_100k_vs_1M_analysis.pdf"))
both %>%
pivot_wider(values_from = value, names_from = analysis) %>%
ggplot(., aes(x=`100K`,y=`1M`))+
geom_point(shape=1, size=1)+
geom_smooth(method="lm", size=0.3)+
facet_wrap(~metric, scales="free")+
stat_cor(method = "pearson", r.accuracy = 0.0001, size=3)
dev.off()
both
library(readr)
library(tidyverse)
library(ggplot2)
library(splitstackshape)
library(ggpubr)
source_data = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/source_data/" # git
middle_dir = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/middle_dir/" # git
stats_dir = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/middle_dir/stats/" # git
out_dir_git = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/out/" # git
out_dir = "/Users/danielagaio/Desktop/metapigs_phylodiv/phylosift/out/" # local
readcounts_samples <- read.csv(paste0(source_data,"readcounts_samples.csv"), header=FALSE)
NROW(readcounts_samples)
r <- cSplit(readcounts_samples, "V1","_")
r$DNA_plate <- paste0(r$V1_1,"_",r$V1_2)
r <- cSplit(r, "V1_3",".")
r <- r %>%
dplyr::select(DNA_plate,V1_3_1, V3)
colnames(r) <- c("DNA_plate","DNA_well","read_count")
head(r)
alpha_1M <- read.csv(paste0(middle_dir,"all.alphadiv"), sep="")
alpha_100K <- read.csv(paste0(middle_dir,"PD_100k/all.alphadiv"), sep="")
get_cleaner_fun <- function(df) {
colnames(df)[1] <- "provv"
df <- cSplit(df, "provv","_")
df$DNA_plate <- paste0(df$provv_1,"_",df$provv_2)
df$DNA_well <- df$provv_3
df <- df %>% dplyr::select(!starts_with("provv"))
df_clean <- df
return(df_clean)
}
alpha_100K <- get_cleaner_fun(alpha_100K)
alpha_1M <- get_cleaner_fun(alpha_1M)
alpha_100K <- alpha_100K %>%
dplyr::select(unrooted_pd,bwpd,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(unrooted_pd,bwpd), names_to="metric") %>%
dplyr::mutate(analysis = "100K")
alpha_1M <- alpha_1M %>%
dplyr::select(unrooted_pd,bwpd,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(unrooted_pd,bwpd), names_to="metric") %>%
dplyr::mutate(analysis = "1M")
alpha <- rbind(alpha_100K,
alpha_1M)
# median and sd
alpha %>%
group_by(metric) %>%
dplyr::summarise(median_unrooted=median(unrooted_pd),
sd_unrooted=sd(unrooted_pd),
median_bwpd=median(bwpd),
sd_bwpd=sd(bwpd))
beta_100K <- read_csv(paste0(middle_dir,"PD_100K/pca_piggies_sel.txt.proj"),
col_names = FALSE)
beta_1M <- read_csv(paste0(middle_dir,"pca_piggies_sel.txt.proj"),
col_names = FALSE)
beta_100K <- get_cleaner_fun(beta_100K)
beta_1M <- get_cleaner_fun(beta_1M)
beta_100K <- beta_100K %>%
dplyr::select(X2,X3,X4,X5,X6,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(X2,X3,X4,X5,X6), names_to="metric") %>%
dplyr::mutate(analysis = "100K")
beta_1M <- beta_1M %>%
dplyr::select(X2,X3,X4,X5,X6,DNA_plate,DNA_well) %>%
pivot_longer(cols=c(X2,X3,X4,X5,X6), names_to="metric") %>%
dplyr::mutate(analysis = "1M")
beta <- rbind(beta_100K,
beta_1M)
beta$metric <- gsub("X2","PC1",beta$metric)
beta$metric <- gsub("X3","PC2",beta$metric)
beta$metric <- gsub("X4","PC3",beta$metric)
beta$metric <- gsub("X5","PC4",beta$metric)
beta$metric <- gsub("X6","PC5",beta$metric)
both <- rbind(alpha,beta)
# give some order
both$metric <- factor(both$metric,
levels=c("unrooted_pd","bwpd",
"PC1","PC2","PC3","PC4","PC5"))
pdf(paste0(out_dir,"correlation_100k_vs_1M_analysis.pdf"))
both %>%
pivot_wider(values_from = value, names_from = analysis) %>%
ggplot(., aes(x=`100K`,y=`1M`))+
geom_point(shape=1, size=1)+
geom_smooth(method="lm", size=0.3)+
facet_wrap(~metric, scales="free")+
stat_cor(method = "pearson", r.accuracy = 0.0001, size=3)
dev.off()
fwrite(x=both, file=paste0(stats_dir,"PD_100K_vs_1M__stats.csv"))
###########################################################################################
library(readr)
library(openxlsx)
stats_dir = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/middle_dir/stats/" # git
out_dir_git = "/Users/danielagaio/Gaio/github/metapigs_phylodiv/out/" # git
## 1. create workbook
wb <- createWorkbook()
## 2. open csv and save as sheets of the workbook
filenames <- list.files(stats_dir, pattern="*.csv", full.names=TRUE)
for (each_filename in filenames) {
ldf <- as.data.frame(lapply(each_filename, read.csv, header = TRUE))
clean_name <- gsub(".*stats//\\s*|.csv.*", "", as.character(each_filename))
addWorksheet(wb, clean_name)
writeData(wb, sheet = clean_name, ldf, colNames = TRUE)
}
## 3. save workbook
saveWorkbook(wb, paste0(out_dir_git,"stats.xlsx"), overwrite=TRUE)
###########################################################################################
out_dir_git
